/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __DENY_UNSHARE_BPF_SKEL_H__
#define __DENY_UNSHARE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct deny_unshare_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_program *handle_cred_prepare;
	} progs;
	struct {
		struct bpf_link *handle_cred_prepare;
	} links;

#ifdef __cplusplus
	static inline struct deny_unshare_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct deny_unshare_bpf *open_and_load();
	static inline int load(struct deny_unshare_bpf *skel);
	static inline int attach(struct deny_unshare_bpf *skel);
	static inline void detach(struct deny_unshare_bpf *skel);
	static inline void destroy(struct deny_unshare_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
deny_unshare_bpf__destroy(struct deny_unshare_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
deny_unshare_bpf__create_skeleton(struct deny_unshare_bpf *obj);

static inline struct deny_unshare_bpf *
deny_unshare_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct deny_unshare_bpf *obj;
	int err;

	obj = (struct deny_unshare_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = deny_unshare_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	deny_unshare_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct deny_unshare_bpf *
deny_unshare_bpf__open(void)
{
	return deny_unshare_bpf__open_opts(NULL);
}

static inline int
deny_unshare_bpf__load(struct deny_unshare_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct deny_unshare_bpf *
deny_unshare_bpf__open_and_load(void)
{
	struct deny_unshare_bpf *obj;
	int err;

	obj = deny_unshare_bpf__open();
	if (!obj)
		return NULL;
	err = deny_unshare_bpf__load(obj);
	if (err) {
		deny_unshare_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
deny_unshare_bpf__attach(struct deny_unshare_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
deny_unshare_bpf__detach(struct deny_unshare_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *deny_unshare_bpf__elf_bytes(size_t *sz);

static inline int
deny_unshare_bpf__create_skeleton(struct deny_unshare_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "deny_unshare_bpf";
	s->obj = &obj->obj;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_cred_prepare";
	s->progs[0].prog = &obj->progs.handle_cred_prepare;
	s->progs[0].link = &obj->links.handle_cred_prepare;

	s->data = deny_unshare_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *deny_unshare_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x28\x07\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0b\0\
\x0a\0\x79\x10\x18\0\0\0\0\0\xbf\x01\0\0\0\0\0\0\x67\x01\0\0\x20\0\0\0\x77\x01\
\0\0\x20\0\0\0\x55\x01\x12\0\0\0\0\0\x85\0\0\0\x9e\0\0\0\xbf\x01\0\0\0\0\0\0\
\x85\0\0\0\xaf\0\0\0\xbf\x03\0\0\0\0\0\0\xb7\0\0\0\0\0\0\0\x79\x31\x08\0\0\0\0\
\0\x67\x01\0\0\x20\0\0\0\x77\x01\0\0\x20\0\0\0\x55\x01\x09\0\x10\x01\0\0\xb7\
\x01\0\0\0\0\0\0\x0f\x13\0\0\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xf8\xff\
\xff\xff\xb7\x02\0\0\x08\0\0\0\x85\0\0\0\x71\0\0\0\x79\xa0\xf8\xff\0\0\0\0\x67\
\0\0\0\x23\0\0\0\xc7\0\0\0\x3f\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xe0\0\0\0\xe0\0\0\0\x05\x02\0\0\0\0\0\0\0\0\0\x02\x02\
\0\0\0\x01\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x04\0\0\0\
\x18\0\0\0\x01\0\0\0\x1c\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x20\0\0\0\x01\0\
\0\x0c\x03\0\0\0\x46\x01\0\0\x02\0\0\x04\x10\0\0\0\x4e\x01\0\0\x07\0\0\0\0\0\0\
\0\x51\x01\0\0\x07\0\0\0\x40\0\0\0\x59\x01\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\
\xdc\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\0\
\0\x0a\0\0\0\x04\0\0\0\xe1\x01\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\xf5\x01\0\0\0\
\0\0\x0e\x09\0\0\0\x01\0\0\0\xfd\x01\0\0\x01\0\0\x0f\0\0\0\0\x0b\0\0\0\0\0\0\0\
\x04\0\0\0\0\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\x20\x75\x6e\x73\x69\x67\x6e\
\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x69\x6e\x74\0\x68\x61\x6e\x64\x6c\x65\
\x5f\x63\x72\x65\x64\x5f\x70\x72\x65\x70\x61\x72\x65\0\x6c\x73\x6d\x2f\x63\x72\
\x65\x64\x5f\x70\x72\x65\x70\x61\x72\x65\0\x2f\x68\x6f\x6d\x65\x2f\x6d\x62\x6c\
\x6f\x6d\x71\x76\x69\x73\x74\x2f\x47\x69\x74\x68\x75\x62\x2f\x6c\x73\x6d\x2d\
\x62\x70\x66\x2f\x65\x78\x61\x6d\x70\x6c\x65\x73\x2f\x64\x65\x6e\x79\x2d\x75\
\x6e\x73\x68\x61\x72\x65\x2f\x64\x65\x6e\x79\x5f\x75\x6e\x73\x68\x61\x72\x65\
\x2e\x62\x70\x66\x2e\x63\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x50\x52\x4f\x47\x28\
\x68\x61\x6e\x64\x6c\x65\x5f\x63\x72\x65\x64\x5f\x70\x72\x65\x70\x61\x72\x65\
\x2c\x20\x73\x74\x72\x75\x63\x74\x20\x63\x72\x65\x64\x20\x2a\x6e\x65\x77\x2c\
\x20\x63\x6f\x6e\x73\x74\x20\x73\x74\x72\x75\x63\x74\x20\x63\x72\x65\x64\x20\
\x2a\x6f\x6c\x64\x2c\0\x20\x20\x20\x20\x69\x66\x20\x28\x72\x65\x74\x29\x20\x7b\
\0\x20\x20\x20\x20\x74\x61\x73\x6b\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x63\x75\x72\x72\x65\x6e\x74\x5f\x74\x61\x73\x6b\x5f\x62\x74\x66\x28\x29\x3b\0\
\x20\x20\x20\x20\x72\x65\x67\x73\x20\x3d\x20\x28\x73\x74\x72\x75\x63\x74\x20\
\x70\x74\x5f\x72\x65\x67\x73\x20\x2a\x29\x20\x62\x70\x66\x5f\x74\x61\x73\x6b\
\x5f\x70\x74\x5f\x72\x65\x67\x73\x28\x74\x61\x73\x6b\x29\x3b\0\x70\x74\x5f\x72\
\x65\x67\x73\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\0\x6c\x6f\x6e\x67\x20\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x30\x3a\x31\0\x20\x20\x20\x20\
\x73\x79\x73\x63\x61\x6c\x6c\x20\x3d\x20\x72\x65\x67\x73\x2d\x3e\x6f\x72\x69\
\x67\x5f\x61\x78\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x73\x79\x73\x63\x61\x6c\
\x6c\x20\x21\x3d\x20\x55\x4e\x53\x48\x41\x52\x45\x5f\x53\x59\x53\x43\x41\x4c\
\x4c\x29\x20\x7b\0\x30\x3a\x30\0\x20\x20\x20\x20\x66\x6c\x61\x67\x73\x20\x3d\
\x20\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x31\x5f\x43\x4f\x52\x45\
\x28\x72\x65\x67\x73\x29\x3b\0\x63\x68\x61\x72\0\x5f\x5f\x41\x52\x52\x41\x59\
\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x4c\x49\x43\x45\x4e\x53\x45\
\0\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\
\0\0\0\xcc\0\0\0\xe0\0\0\0\x2c\0\0\0\x08\0\0\0\x34\0\0\0\x01\0\0\0\0\0\0\0\x05\
\0\0\0\x10\0\0\0\x34\0\0\0\x0c\0\0\0\0\0\0\0\x45\0\0\0\x8e\0\0\0\x05\x94\0\0\
\x20\0\0\0\x45\0\0\0\xda\0\0\0\x09\xbc\0\0\x28\0\0\0\x45\0\0\0\xe9\0\0\0\x0c\
\xcc\0\0\x30\0\0\0\x45\0\0\0\x10\x01\0\0\x1f\xd0\0\0\x50\0\0\0\x45\0\0\0\x6f\
\x01\0\0\x15\xd8\0\0\x58\0\0\0\x45\0\0\0\x6f\x01\0\0\x0f\xd8\0\0\x68\0\0\0\x45\
\0\0\0\x8c\x01\0\0\x09\xe8\0\0\x88\0\0\0\x45\0\0\0\0\0\0\0\0\0\0\0\x90\0\0\0\
\x45\0\0\0\xb6\x01\0\0\x0d\xfc\0\0\xa0\0\0\0\x45\0\0\0\xb6\x01\0\0\x0d\xfc\0\0\
\xa8\0\0\0\x45\0\0\0\0\0\0\0\0\0\0\0\xb8\0\0\0\x45\0\0\0\x8e\0\0\0\x05\x94\0\0\
\x10\0\0\0\x34\0\0\0\x02\0\0\0\x50\0\0\0\x06\0\0\0\x6b\x01\0\0\0\0\0\0\x70\0\0\
\0\x06\0\0\0\xb2\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\0\0\0\0\0\x02\
\0\xb8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2a\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\xc0\
\0\0\0\0\0\0\0\x68\0\0\0\x11\0\x03\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\xf0\0\0\
\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x40\0\0\0\
\0\0\0\0\x04\0\0\0\x01\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x60\0\0\0\0\
\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x80\0\0\0\0\0\
\0\0\x04\0\0\0\x01\0\0\0\x90\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xa0\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\xb0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xc0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xd0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\xe0\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\xf0\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x0c\x01\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x1c\x01\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x09\x0a\0\x2e\x74\
\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\x74\0\x2e\x6c\x6c\
\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\x6c\x69\x63\x65\x6e\x73\x65\0\x68\
\x61\x6e\x64\x6c\x65\x5f\x63\x72\x65\x64\x5f\x70\x72\x65\x70\x61\x72\x65\0\x6c\
\x73\x6d\x2f\x63\x72\x65\x64\x5f\x70\x72\x65\x70\x61\x72\x65\0\x2e\x73\x74\x72\
\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x30\x5f\x33\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x3e\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x40\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x22\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x63\0\0\
\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x01\0\0\0\0\0\0\xfd\x02\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x04\0\0\0\0\0\0\x2c\x01\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x57\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x30\x05\0\0\0\0\0\0\x78\0\0\0\0\0\0\0\x0a\0\0\0\x03\0\0\0\x08\
\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x5f\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xa8\x05\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x06\0\0\0\x04\0\0\0\x08\0\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\x07\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\
\x05\0\0\0\0\0\0\xf0\0\0\0\0\0\0\0\x06\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\x14\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xa8\
\x06\0\0\0\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x4f\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xaa\x06\0\0\0\0\0\0\
\x77\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct deny_unshare_bpf *deny_unshare_bpf::open(const struct bpf_object_open_opts *opts) { return deny_unshare_bpf__open_opts(opts); }
struct deny_unshare_bpf *deny_unshare_bpf::open_and_load() { return deny_unshare_bpf__open_and_load(); }
int deny_unshare_bpf::load(struct deny_unshare_bpf *skel) { return deny_unshare_bpf__load(skel); }
int deny_unshare_bpf::attach(struct deny_unshare_bpf *skel) { return deny_unshare_bpf__attach(skel); }
void deny_unshare_bpf::detach(struct deny_unshare_bpf *skel) { deny_unshare_bpf__detach(skel); }
void deny_unshare_bpf::destroy(struct deny_unshare_bpf *skel) { deny_unshare_bpf__destroy(skel); }
const void *deny_unshare_bpf::elf_bytes(size_t *sz) { return deny_unshare_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
deny_unshare_bpf__assert(struct deny_unshare_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __DENY_UNSHARE_BPF_SKEL_H__ */
